name: Run Tests, Build NPM, and Auto-Tag Release

on:
  push:
    branches:
      - 'main'
      - 'dev'
  pull_request:
    branches:
      - main     # Run on pull requests targeting the main branch
      - dev     # Run on pull requests targeting the dev branch

jobs:
  run_tests_ts:
    # This job runs tests for the Python, TypeScript, and Go code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]  # Using Node.js version 22
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run TypeScript tests
        run: |
          npm install
          npm install tsconfig-paths
          echo "Current directory:"
          ls -l
          echo "Changing to tests directory..."
          cd tests/
          echo "Installing npm dependencies..."
          npm install --include=dev || { echo "npm install --include=dev failed"; exit 1; }
          echo "Running TypeScript tests..."
          npm run test
  build_npm:
    # This job builds the npm package
    runs-on: ubuntu-latest
    needs: [run_tests_ts]
    if: github.ref == 'refs/heads/main'  # Only run on the main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          echo "Installing npm dependencies..."
          npm ci
          npm install --save
          npm run build
          git config user.email "brian@oof.gg"
          git config user.name "Brian S."

          echo "Committing the new version and pushing to GitHub..."
          git pull
          git add dist package.json package-lock.json -f
          
          echo "Committing the staged changes..."
          git commit -m "chore: prepare release" || true

          echo "Bumping the version (choose one of patch, minor, or major)"
          NEW_VERSION=$(npm version patch -m "ci: bump version to %s")

          git push --follow-tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        run: |
          echo "Publishing to npm..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  auto_tag_release:
    runs-on: ubuntu-latest
    needs: build_npm
    if: github.ref == 'refs/heads/main'  # Only run on the main branch
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the latest and previous tags
        id: get_tags
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          PREVIOUS_TAG=$(git describe --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Calculate the next tag version
        id: calc_new_version
        run: |
          # Parse the latest tag to increment the patch version
          LATEST_TAG=${{ env.latest_tag }}

          # Remove the "v" prefix and split into major, minor, and patch
          VERSION_NUMBER=${LATEST_TAG#v}
          MAJOR=$(echo "$VERSION_NUMBER" | cut -d. -f1)
          MINOR=$(echo "$VERSION_NUMBER" | cut -d. -f2)
          PATCH=$(echo "$VERSION_NUMBER" | cut -d. -f3)

          # Increment the patch version (or change logic for major/minor if needed)
          NEW_TAG="v$MAJOR.$MINOR.$((PATCH))"
          
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        run: |
          git fetch origin dev:dev
          PREVIOUS_TAG=${{ env.previous_tag }}
          LATEST_TAG=${{ env.latest_tag }}
          git log "$PREVIOUS_TAG".."dev" --pretty=format:"* %s (%h)" > changelog.txt

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: "Release ${{ env.new_tag }}"
          body_path: ./changelog.txt  # Read changelog directly from file
          draft: false
          prerelease: false